pipeline {
    agent any
    environment {
        DOCKER_IMAGE_NAME_FRONTEND = 'spefrontend1'
        DOCKER_IMAGE_NAME_BACKEND = 'spebackend3'
        GITHUB_REPO_URL = 'https://github.com/samarpita-bhaumik/Moviemate.git'
        GIT_CREDENTIALS = 'mmProj'
        LANG = 'en_US.UTF-8'
        LC_ALL = 'en_US.UTF-8'
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout the repository using GitSCM plugin with specified credentials
                checkout([$class: 'GitSCM', branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: env.GITHUB_REPO_URL, credentialsId: env.GIT_CREDENTIALS]]
                ])
            }
        }
        stage('Stage 2: Prepare Environment') {
            steps {
                // sh 'sudo apt-get update'
                sh 'chmod -R +r MoviemateProject Backend'
                sh 'ls -l MoviemateProject'
                sh 'ls -l Backend'
            }
        }

        stage('Install Python and Flask') {
            steps {
                // Update package index and install Python 3 and pip
                sh 'sudo apt update'
                sh 'sudo apt install -y python3 python3-pip'
                
                // Install Flask using pip
                sh 'pip3 install Flask pandas flask_cors'
            }
        }

        stage('Start Flask Server') {
            steps {
                script {
                    // Start the Flask server in the background
                    sh 'python3 Backend/app.py &'
                    sleep 40 // Give Flask some time to start
                }
            }
        }

        stage('Backend Testing') {
            steps {
                script {
                    try {
                        sh 'python3 Backend/test_backend.py'
                    } finally {
                        // Ensure the Flask server is stopped after tests
                        sh 'pkill -f "python3 Backend/app.py"'
                    }
                }
            }
        }

        stage('Stage 4: Setup ngrok') {
            steps {
                script {
                    // Write ngrok configuration to a file
                    sh 'echo "authtoken: 2cGkRwBjSdrcSHpoKCNgqCqTvY4_2k3ore6rZvxLpw3SDZmwv" > ~/.ngrok2/ngrok.yml'
                }
            }
        }
        stage('Stage 5: Start ngrok') {
            steps {
                script {
                    // Start ngrok in the background
                    sh 'nohup ngrok http 5000 &'
                    sleep 10 // Give ngrok some time to start and provide the URL
                }
            }
        }
        stage('Stage 6: Get ngrok URL') {
            steps {
                script {
                    // Get the ngrok URL
                    def ngrokUrl = sh(script: "curl -s http://127.0.0.1:4040/api/tunnels | jq -r .tunnels[0].public_url", returnStdout: true).trim()
                    echo "ngrok URL: ${ngrokUrl}"
                    
                    // Replace the backendUrl in the frontend code
                    sh """
                        sed -i 's|http://localhost:5000|${ngrokUrl}|g' MoviemateProject/Moviematebody.js
                    """
                }
            }
        }

        stage('Stage 7: Build Frontend Image') {
            steps {
                // Build frontend Docker image
                sh "sudo docker build -t ${DOCKER_IMAGE_NAME_FRONTEND} MoviemateProject"
            }
        }
       
        stage('Stage 8: Build Backend Image') {
            steps {
                // Build backend Docker image
                sh "sudo docker build -t ${DOCKER_IMAGE_NAME_BACKEND} Backend"
            }
        }
        stage('Stage 9: Push Image to DockerHub') {
            steps {
                script {
                    // Log in to DockerHub
                    sh "docker login -u your-dockerhub-username -p your-dockerhub-password"
                    
                    // Push frontend and backend images to DockerHub
                    sh "docker push ${DOCKER_IMAGE_NAME_FRONTEND}"
                    sh "docker push ${DOCKER_IMAGE_NAME_BACKEND}"
                }
            }
        }
        
        stage('Stage 10: Clean Docker Images') {
            steps {
                script {
                    // Prune unused Docker containers and images
                    sh 'docker container prune -f'
                    sh 'docker image prune -f'
                }
            }
        }
        
        stage('Stage 11: Ansible Deployment') {
            steps {
                script { 
                    // Execute Ansible playbook for deployment
                    sh 'ansible-playbook -i inventory.yaml moviemateDeploy.yaml'
                }
            }
        }
    }
}
