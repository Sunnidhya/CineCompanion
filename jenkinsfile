pipeline {
    agent any
    environment {
        DOCKER_IMAGE_NAME_FRONTEND = 'spefrontend1'
        DOCKER_IMAGE_NAME_BACKEND = 'spebackend3'
        GITHUB_REPO_URL = 'https://github.com/samarpita-bhaumik/Moviemate.git'
        GIT_CREDENTIALS = 'mm'
        // DOCKERHUB_USERNAME = 'roysun96'
        // DOCKERHUB_PASSWORD = 'Sr@16031996'
        LANG = 'en_US.UTF-8'
        LC_ALL = 'en_US.UTF-8'
    }
    stages {
        stage('Checkout') {
            steps {
                // Use checkout scm which uses the credentials configured in the SCM section of the Jenkins job
                checkout([$class: 'GitSCM', branches: [[name: 'main']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    userRemoteConfigs: [[url: 'https://github.com/Sunnidhya/Moviemate.git', credentialsId: env.GIT_CREDENTIALS]]
                ])
            }
        }
        stage('Stage 1: Git Clone') {
            steps {
                // Explicitly specify credentials for git step
                git url: 'https://github.com/samarpita-bhaumik/Moviemate.git', credentialsId: env.GIT_CREDENTIALS
            }
        }
        stage('Stage 2:Prepare Environment') {
            steps {
                sh 'sudo apt update'
                sh 'chmod -R +r MoviemateProject Backend'
                sh 'ls -l MoviemateProject'
                sh 'ls -l Backend'
            }
        }
        stage('Stage 3:Backend testing') {
            steps {
                sh 'python Backend/test_backend.py'
            }
        }

        stage('Stage 4:Setup ngrok') {
            steps {
                script {
                    // Write ngrok configuration to a file
                    sh 'echo "authtoken: 2cGkRwBjSdrcSHpoKCNgqCqTvY4_2k3ore6rZvxLpw3SDZmwv" > ~/.ngrok2/ngrok.yml'
                }
            }
        }
        stage('Stage 5:Start ngrok') {
            steps {
                script {
                    // Start ngrok in the background
                    sh 'nohup ngrok http 5000 &'
                    sleep 10 // Give ngrok some time to start and provide the URL
                }
            }
        }
        stage('Stage 6:Get ngrok URL') {
            steps {
                script {
                    // Get the ngrok URL
                    def ngrokUrl = sh(script: "curl -s http://127.0.0.1:4040/api/tunnels | jq -r .tunnels[0].public_url", returnStdout: true).trim()
                    echo "ngrok URL: ${ngrokUrl}"
                    
                    // Replace the backendUrl in the frontend code
                    sh """
                        sed -i 's|http://localhost:5000|${ngrokUrl}|g' MoviemateProject/Moviematebody.js
                    """
                }
            }
        }

        stage('Stage 7:Build Frontend Image') {
            steps {
                sh 'sudo docker build -t '
            }
        }
       
        stage('Stage 8:Build Backend Image'){
            steps{
                sh 'sudo docker build -t '
            }
        }
        stage('Stage 9: Push image to DockerHub') {
            steps {
                script {
                        sh "docker login "
                        sh 'docker push  '
                        sh "docker push "
                    
                }
            }
        }
        
         stage('Stage 10: Clean Docker Images') {
            steps {
                script {
                    sh 'docker container prune -f'
                    sh 'docker image prune -f'
                }
            }
        }
        
        stage('Stage 11: Ansible Deployment') {
            steps {
                script { 
                    sh 'ansible-playbook -i inventory.yaml  moviemateDeploy.yaml'
                }
            }
        }




       


    }
}
