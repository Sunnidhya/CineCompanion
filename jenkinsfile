pipeline {
    agent any
    environment {
        DOCKER_IMAGE_NAME_FRONTEND = 'spefrontend1'
        DOCKER_IMAGE_NAME_BACKEND = 'spebackend3'
        GITHUB_REPO_URL = 'https://github.com/samarpita-bhaumik/Moviemate.git'
        GIT_CREDENTIALS = 'mmProj'
        DOCKER_HUB_USERNAME = 'samsun0196'
        DOCKER_HUB_PASSWORD = 'Sr@16031996'
        DOCKER_HUB_CREDENTIALS = 'Dockerhub_creds_samsun'
        LANG = 'en_US.UTF-8'
        LC_ALL = 'en_US.UTF-8'
    }
    stages {
        stage('Stage 1: Checkout') {
            steps {
                // Checkout the repository using GitSCM plugin with specified credentials
                checkout([$class: 'GitSCM', branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: env.GITHUB_REPO_URL, credentialsId: env.GIT_CREDENTIALS]]
                ])
            }
        }
        stage('Stage 2: Prepare Environment') {
            steps {
                // sh 'sudo apt-get update'
                sh 'chmod -R +r MoviemateProject Backend'
                sh 'ls -l MoviemateProject'
                sh 'ls -l Backend'
            }
        }

        stage('Stage 3: Install Python and Flask') {
            steps {
                // Update package index and install Python 3 and pip
                sh 'sudo apt update'
                sh 'sudo apt install -y python3 python3-pip'
                
                // Install Flask using pip
                sh 'pip3 install Flask pandas flask_cors requests'
            }
        }

        stage('Stage 4: Start Flask Server') {
            steps {
                script {
                    // Start the Flask server in the background
                    dir('Backend') {
                            sh 'nohup python3 app.py > /dev/null 2>&1 &'
                    sleep 40 // Give Flask some time to start (adjust as needed)
                        }
                }
            }
        }

        stage('Stage 4: Backend Testing') {
            steps {
                script {
                    try {
                        // Change directory to Backend
                        dir('Backend') {
                            sh 'pip install python-logstash-async'
                            sh 'python3 test_backend.py'
                        }
                    } finally {
                        // Ensure the Flask server is stopped after tests
                        dir('Backend') {
                            sh 'pkill -f "python3 app.py"'
                        }
                    }
                }
            }
        }

        stage('Stage 5: Setup ngrok') {
            steps {
                script {
                    // Ensure the directory exists before writing the ngrok configuration file
                    sh 'mkdir -p /var/lib/jenkins/.ngrok2'
                    sh 'echo "authtoken: 2cGkRwBjSdrcSHpoKCNgqCqTvY4_2k3ore6rZvxLpw3SDZmwv" > /var/lib/jenkins/.ngrok2/ngrok.yml'
                    sh 'ngrok config upgrade' // Upgrade ngrok configuration file
                }
            }
        }
        stage('Stage 6: Start ngrok') {
            steps {
                script {
                    // Install screen if not already installed
                    sh 'sudo apt-get install -y screen'
                    
                    // Start ngrok in a detached screen session
                    sh 'screen -dmS ngrok_session ngrok http 5000'
                    sleep 10 // Give ngrok some time to start and provide the URL
                }
            }
        }

        stage('Stage 7: Install jq') {
            steps {
                script {
                    // Install jq
                    sh 'sudo apt-get update && sudo apt-get install -y jq'
                }
            }
        }

        stage('Stage 8: Get ngrok URL') {
            steps {
                script {
                    // Get the ngrok URL
                    def ngrokUrl = sh(script: "curl -s http://127.0.0.1:4040/api/tunnels | jq -r .tunnels[0].public_url", returnStdout: true).trim()
                    echo "ngrok URL: ${ngrokUrl}"
                    
                    // Replace the backendUrl in the frontend code
                    sh """
                        sed -i 's|http://localhost:5000|${ngrokUrl}|g' MoviemateProject/Moviematebody.js
                    """
                }
            }
        }

        stage('Stage 9: Build Frontend Image') {
            steps {
                // Build frontend Docker image
                sh "sudo docker build -t ${DOCKER_IMAGE_NAME_FRONTEND} MoviemateProject"
                sh "sudo docker tag ${DOCKER_IMAGE_NAME_FRONTEND}:latest ${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME_FRONTEND}:latest"
            }
        }
       
        stage('Stage 10: Build Backend Image') {
            steps {
                // Build backend Docker image
                sh "sudo docker build -t ${DOCKER_IMAGE_NAME_BACKEND} Backend"
                sh "sudo docker tag ${DOCKER_IMAGE_NAME_BACKEND}:latest ${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME_BACKEND}:latest"
            }
        }
        stage('Stage 11: Push Image to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_HUB_CREDENTIALS, usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        // Log in to DockerHub
                        sh "echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin"
                        
                        // Push frontend and backend images to DockerHub
                        sh "docker push ${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME_FRONTEND}:latest"
                        sh "docker push ${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME_BACKEND}:latest"
                    }
                }
            }
        }
        
        stage('Stage 12: Clean Docker Images') {
            steps {
                script {
                    // Prune unused Docker containers and images
                    sh 'docker container prune -f'
                    sh 'docker image prune -f'
                }
            }
        }
        
        stage('Stage 14: Ansible Deployment') {
            steps {
                script { 
                    // Execute Ansible playbook for deployment
                    def ansiblePlaybook = 'moviemateDeploy.yml' // Name of your playbook file
                    def playbookOutput = sh(script: "ansible-playbook -i inventory.yaml ${ansiblePlaybook}", returnStdout: true)
                    echo playbookOutput
                    // sh 'ansible-playbook -i inventory.yaml moviemateDeploy.yaml'
                }
            }
        }
    }
}
